# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

name: $(build.sourceBranchName)-$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  batch: true
  branches:
    include: 
    - master
    - staging
    - devsecops
    - kubesec
  paths:
    exclude: 
    # Exclude README.md from triggering content deployments
    # Exclude the app folder from triggering content deployments, since it isn't included in the Dockerfile anyway
    - README.md
    - app/* 

# no PR builds
pr: none

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '9157bf98-df3a-495a-89bf-451c9cb4d572'
  imageRepository: 'aksworkshop'
  containerRegistry: 'acraks189441.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildNumber)'
  sourceVersion: '$(Build.SourceVersion)'
  sourceBranch: '$(Build.SourceBranchName)'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:  
  - job: Build
    displayName: Build job
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: sed -i 's/#BUILD_ID#/$(tag)/g' _includes/nav.html
      displayName: Update site with Build ID

    - script: |
          SHORTCOMMITID=$(echo $(sourceVersion) | cut -c1-7)  
          sed -i "s/#COMMIT_ID#/$SHORTCOMMITID/g" _includes/nav.html
      displayName: Update site with Commit ID

    - task: Bash@3
      displayName: Build image
      inputs:
        targetType: 'inline'
        script: |
          # Write your commands here
          set -x
          docker build -t captureorder:$(tag) .
          docker tag captureorder:$(tag) $(acrEndpoint)/captureorder:$(tag)
          
    - task: Docker@2
      displayName: Login into Aqua registry
      inputs:
        containerRegistry: 'aquaRegistry'
        command: 'login'
        
    - task: aquasecScanner@4
      displayName: Scan image with Aqua
      inputs:
        image: captureorder:$(tag)
        scanType: 'local'
        register: false
        hideBase: false
        showNegligible: false
        windowsScannerVersion: '4.2.0'
        connection: 'aqua-console'
        scanner: 'registry.aquasec.com/scanner:4.6'
        customFlags: '--layer-vulnerabilities'
        
    - task: Docker@2
      displayName: Push image
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: captureorder
        command: push
        tags: $(tag)